@page
@model GolfTeeGameWebApp.Pages.GamePageModel
@{
    // Retrieve the game state from the bound model.
    var pegs = Model.Game.PegState;
    var legalJumps = Model.Game.PossibleMoves;
    var hints = Model.Game.Hints;
    var history = Model.Game.History;
    var moveNumber = Model.Game.MoveNumber;
    
    // Use the transient MoveFrom property as the currently selected peg for a move source.
    int? currentMoveFrom = Model.MoveFrom;
    
    // Build a lookup of legal moves: from peg index → destination peg indices.
    var legalMovesLookup = legalJumps
        .GroupBy(j => j.From)
        .ToDictionary(g => g.Key, g => g.Select(j => j.To).ToList());
    var legalFroms = legalJumps.Select(j => j.From).Distinct().ToHashSet();
}
<h1>Peg Jump</h1>
<h4>The Cracker Barrel Golf Tees Game</h4>

<!-- Single unified form which posts all game state on every action -->
<form method="post" id="gameForm">
    <!-- Hidden fields for game state -->
    @for (int i = 0; i < pegs.Count; i++)
    {
        <input asp-for="Game.PegState[@i]" type="hidden" name="Game.PegState[@i]" value="@pegs[i]" />
    }
    @for (int i = 0; i < history.Count; i++)
    {
        <input asp-for="Game.History[@i].From" type="hidden" name="Game.History[@i].From" value="@history[i].From" />
        <input asp-for="Game.History[@i].To" type="hidden" name="Game.History[@i].To" value="@history[i].To" />
    }
    <input asp-for="Game.MoveNumber" type="hidden" name="Game.MoveNumber" value="@moveNumber" />
    <!-- Hidden field used to hold the source peg if one is selected -->
    <input asp-for="MoveFrom" type="hidden" name="MoveFrom" value="@(currentMoveFrom.HasValue ? currentMoveFrom.Value.ToString() : "")" />

    <!-- Top action controls -->
    <div class="game-controls">
        <button type="submit" asp-page-handler="NewGame" class="btn btn-secondary">New Game</button>
        <button type="submit" asp-page-handler="Undo" class="btn btn-outline-secondary" disabled="@(history.Count == 0 ? "disabled" : null)">Undo</button>        
        <button type="submit" asp-page-handler="ShowHints" class="btn btn-outline-secondary">Show Hints</button>
    </div>

    <!-- The peg board -->
    <div class="peg-board">
        @{
            // Define rows of the board.
            int[][] rows = new int[][]
            {
                new[] { 0 },
                new[] { 1, 2 },
                new[] { 3, 4, 5 },
                new[] { 6, 7, 8, 9 },
                new[] { 10, 11, 12, 13, 14 }
            };
        }
        @for (int row = 0; row < rows.Length; row++)
        {
            <div class="peg-row">
                @foreach (var idx in rows[row])
                {
                    var isFilled = pegs[idx];
                    var isLegalFrom = legalFroms.Contains(idx);
                    var isSelected = (currentMoveFrom.HasValue && currentMoveFrom.Value == idx);
                    bool isLegalTo = false;
                    if (currentMoveFrom.HasValue && legalMovesLookup.ContainsKey(currentMoveFrom.Value))
                    {
                        isLegalTo = legalMovesLookup[currentMoveFrom.Value].Contains(idx);
                    }
                    var holeClass = "peg-hole";
                    if (isFilled) { holeClass += " peg-filled"; }
                    if (isLegalFrom && isFilled && !isSelected) { holeClass += " peg-legal"; }
                    if (isSelected) { holeClass += " peg-selected"; }
                    if (!isFilled && isLegalTo) { holeClass += " peg-move-target"; }
                <div class="@holeClass">
                    @if (isFilled)
                    {
                        // Render a submit button for a legal source peg.
                        if (isLegalFrom)
                        {
                            <button type="submit" asp-page-handler="SelectFrom" name="from" value="@idx" title="Select peg @idx"></button>
                        }
                    }
                    else if (isLegalTo)
                    {
                        // Render a submit button for the legal destination peg.
                        <button type="submit" asp-page-handler="MakeMove" name="TargetPeg" value="@idx" title="Move to hole @idx"></button>
                    }
                </div>
                }
            </div>
        }
    </div>

    <!-- Hints and Move History -->
    @if (hints.Count > 0 && legalJumps.Count == hints.Count)
    {
        <h5>Hints</h5>
        <table class="table table-sm table-bordered hint-table">
            <thead>
                <tr>
                    <th>Move From</th>
                    <th>Move To</th>
                    <th>Best Outcome</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < legalJumps.Count; i++)
                {
                    var move = legalJumps[i];
                    var best = hints[i];
                    <tr>
                        <td>@move.From</td>
                        <td>@move.To</td>
                        <td>@best peg@(best == 1 ? "" : "s") remaining</td>
                        <td>
                            <!-- Insert a hidden input that provides the source peg for this hinted move -->
                            <input asp-for="HintMoveFrom" type="hidden" name="HintMoveFrom" value="@move.From" />
                            <button type="submit" asp-page-handler="MakeMove" name="TargetPeg" value="@move.To" class="btn btn-primary btn-sm">
                                Make this move
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    
    @if (history.Count > 0)
    {
        <h6>Move History</h6>
        <ul>
            @foreach (var jump in history)
            {
                <li>Peg @jump.From → @jump.To</li>
            }
        </ul>
    }
</form>